# This references a standard debian container from the
# Docker Hub https://registry.hub.docker.com/_/debian/
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: debian
# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongodb
    # http://devcenter.wercker.com/docs/services/mongodb.html

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html
build:
    # Steps make up the actions in your pipeline
    # Read more about steps on our dev center:
    # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    - install-packages:
        packages: wget git build-essential liblapack-dev libblas-dev libgsl0-dev automake libtool gfortran python gawk libeigen3-dev libgmp-dev libboost-all-dev libarpack2-dev libxc-dev
    - script:
        name: setup
        code: |
          # Define work directories
          WORKDIR=$PWD/dependencies
          mkdir $WORKDIR
          mkdir $WORKDIR/bin
          mkdir $WORKDIR/lib
          cd $WORKDIR
          #wget https://www.dropbox.com/s/dlc3u9pbelp9iu1/libint2.0-beta-old.tgz
          wget https://www.dropbox.com/s/tzmqzt3n0trpayf/libint2.0-beta.tgz
          tar xzvf libint2.0-beta.tgz
          cd -
          # Build libint
          git clone https://github.com/evaleev/libint.git
          cd libint
          git checkout v1
          aclocal -I lib/autoconf
          autoconf
          ./configure --prefix=$WORKDIR
          make -j 4
          make install
          make clean
          make distclean
          # #Build libint2
          # export CC=gcc
          # export CXX=g++
          # export OPENMPFLAGS=-fopenmp
          # export CXXFLAGS="-std=c++11 -Wno-enum-compare $OPENMPFLAGS"
          # export LDFLAGS=$OPENMPFLAGS
          # git checkout master
          # aclocal -I lib/autoconf
          # autoconf
          # ./configure --prefix=$WORKDIR CPPFLAGS='-I/usr/include/eigen3'
          # make -j 4
          # make install
          cd ..
    - script:
        name: build
        code: |
          export PATH=$PATH:$WORKDIR/bin
          export C_INCLUDE_PATH=$C_INCLUDE_PATH:$WORKDIR/include:$WORKDIR/include/libint2:/usr/include/eigen3
          export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$WORKDIR/include:$WORKDIR/include/libint2:/usr/include/eigen3
          export LIBRARY_PATH=$LIBRARY_PATH:$WORKDIR/lib
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$WORKDIR/lib
          # Build Lowdin
          ./configure -p $WORKDIR/bin -s /tmp -l "-lblas -llapack -larpack"
          make -j 4
          make install
    - script:
        name: tests
        code: |
          # Perform tests
          make test
